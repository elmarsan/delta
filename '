#pragma once

#include "Animation.h"
#include "ECS.h"
#include "SDL_timer.h"
#include "TextureManager.h"
#include "TransformComponent.h"
#include "Vector2D.h"

#include <SDL.h>
#include <map>
#include <string_view>

class SpriteComponent: public Component
{
  private:
    TransformComponent* transform;
    SDL_Texture* texture;
    SDL_RendererFlip flip;
    SDL_Rect src, dst;
    int w, h;

    Vector2D framePosition;
    // int speed;
    std::map<std::string, Animation> animations;
    Animation* currentAnimation;
    // int animIndex = 0;
    // std::string animName;

  public:
    SpriteComponent(int w, int h, std::string texturePath, SDL_Color* colorMod = nullptr):
        flip(SDL_FLIP_NONE), w(w), h(h)
    {
        texture = TextureManager::load(texturePath, colorMod);
        animations = std::map<std::string, Animation>();
    }

    void addAnimation(std::string name, const Animation& animation) { animations[name] = animation; }

    ~SpriteComponent() = default;

    void init() override { transform = &entity->getComponent<TransformComponent>(); }

    void update() override
    {
        if (transform->velocity.x != 0 || transform->velocity.y != 0)
        {
            int index = static_cast<int>((SDL_GetTicks() / speed) % animations[animName].numFrames());
            framePosition = animations[animName].getFramePos(index);
        }

        if (animName != "")
            playAnimation();

        dst.x = transform->position.x;
        dst.y = transform->position.y;
        dst.w = dst.h = 44;

        src.x = framePosition.x;
        src.y = framePosition.y;
        src.w = w;
        src.h = h;
    }

    void draw() override { TextureManager::draw(texture, &src, &dst, flip); }

    void setAnimation(const std::string& animation) { animName = animation; }

    void stopAnimation() { animName = ""; }

    void playAnimation()
    {
        if (animIndex == animations[animName].numFrames() - 1)
            animIndex = 0;
        else
            animIndex++;
        speed = animations[animName].speed;
    }
};
